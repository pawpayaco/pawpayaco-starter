// /api/claim.js
import { createClient } from '@supabase/supabase-js';

const supabaseUrl  = process.env.NEXT_PUBLIC_SUPABASE_URL;
const serviceKey   = process.env.SUPABASE_SERVICE_ROLE_KEY; // server-only!
const sb = createClient(supabaseUrl, serviceKey, { auth: { persistSession: false } });

const normUID = (u='') => u.trim().toUpperCase().replace(/[^0-9A-F]/g, '');

export default async function handler(req, res) {
  res.setHeader('Cache-Control', 'no-store');

  try {
    if (req.method === 'GET') {
      // init() uses this to see if the tag is already claimed
      const uid = normUID((new URL(req.url, `http://${req.headers.host}`)).searchParams.get('u') || '');
      if (!uid) return res.status(400).json({ error: 'missing uid' });

      const { data, error } = await sb.from('uids')
        .select('affiliate_url')
        .eq('uid', uid)
        .maybeSingle();

      if (error) throw error;
      if (data?.affiliate_url) return res.status(200).json({ to: data.affiliate_url });
      return res.status(200).json({ status: 'unclaimed' });
    }

    if (req.method === 'POST') {
      // Claim: bind uid -> business and return the affiliate link
      const body = typeof req.body === 'string' ? JSON.parse(req.body || '{}') : (req.body || {});
      const uid = normUID(body.uid || '');
      const business_id = body.business_id || '';

      if (!uid || !business_id) return res.status(400).json({ error: 'missing uid or business_id' });

      // look up business to get its affiliate_url
      const { data: biz, error: bizErr } = await sb
        .from('businesses')
        .select('id, affiliate_url')
        .eq('id', business_id)
        .maybeSingle();
      if (bizErr) throw bizErr;
      if (!biz) return res.status(404).json({ error: 'business not found' });

      // upsert the uid row
      const { error: upErr } = await sb.from('uids').upsert({
        uid,
        business_id: biz.id,
        affiliate_url: biz.affiliate_url || null,
        registered_at: new Date().toISOString()
      }, { onConflict: 'uid' });
      if (upErr) throw upErr;

      // respond with destination (frontend will redirect)
      return res.status(200).json({ to: biz.affiliate_url || null, status: 'claimed' });
    }

    res.setHeader('Allow', 'GET, POST');
    return res.status(405).end('Method Not Allowed');
  } catch (e) {
    console.error('claim handler error:', e);
    return res.status(500).json({ error: e?.message || 'server error' });
  }
}
